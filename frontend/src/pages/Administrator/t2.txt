package Forum;

import jakarta.ws.rs.FormParam;
import org.jboss.resteasy.reactive.PartType;

import java.io.InputStream;

public class PostCreateRequest {

    @FormParam("title")
    public String title;

    @FormParam("message")
    public String message;

    @FormParam("authorName")
    public String authorName;

    @FormParam("forumCategory")
    public String forumCategory;

    // รูปหน้าปก (คงสไตล์เดิม)
    @FormParam("picture")
    @PartType("application/octet-stream")
    public InputStream picture;

    @FormParam("pictureFileName")
    public String pictureFileName;

    // ใหม่: ไฟล์เอกสารของโพสต์ (ไฟล์เดียว)
    @FormParam("document")
    @PartType("application/octet-stream")
    public InputStream document;

    @FormParam("documentFileName")
    public String documentFileName;
}

package Forum;

import com.aventrix.jnanoid.jnanoid.NanoIdUtils;
import io.quarkus.hibernate.orm.panache.PanacheEntityBase;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import model.CommentEntity;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "posts")
public class PostEntity extends PanacheEntityBase {
    @Id
    @Column(length = 21, nullable = false, updatable = false)
    private String id;

    @NotBlank
    @Size(max = 100)
    @Column(name = "author_name", nullable = false, length = 100)
    private String authorName;

    @NotBlank
    @Column(name = "author_email", nullable = false, length = 150)
    private String authorEmail;

    @NotBlank
    @Size(max = 255)
    private String title;

    @NotBlank
    @Column(nullable = false, columnDefinition = "TEXT")
    private String message;

    @Column(nullable = false)
    private long likes = 0;

    @Column(nullable = false)
    private long views = 0;

    @Column(name = "forum_category")
    private String forumCategory;

    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @Column(length = 512,name = "avatarurl")
    private String avatarUrl;

    @Transient
    private boolean likedByUser;

    @ElementCollection
    @CollectionTable(name = "post_likes", joinColumns = @JoinColumn(name = "post_id"))
    @Column(name = "user_email")
    private Set<String> likedBy = new HashSet<>();

    @Column(name = "pictureUrl")
    private String pictureUrl;

    // ใหม่: ลิงก์ไฟล์เอกสารของโพสต์
    @Column(name = "documentUrl")
    private String documentUrl;

    @PrePersist
    void prePersist() {
        if (id == null || id.isBlank()) id = NanoIdUtils.randomNanoId();
        createdAt  = LocalDateTime.now();
        updatedAt  = createdAt;
    }

    @OneToMany(mappedBy = "post", cascade = CascadeType.ALL, orphanRemoval = true)
    private java.util.List<CommentEntity> comments = new java.util.ArrayList<>();

    @PreUpdate
    void preUpdate() { updatedAt = LocalDateTime.now(); }

    public String getId()            { return id; }
    public String getAuthorName()    { return authorName; }
    public String getAuthorEmail()   { return authorEmail; }
    public String getTitle()         { return title; }
    public String getMessage()       { return message; }
    public long   getLikes()         { return likes; }
    public long   getViews()         { return views; }
    public LocalDateTime getCreatedAt() { return createdAt; }
    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public Set<String> getLikedBy() { return likedBy; }

    public void setAuthorName(String n)     { this.authorName = n; }
    public void setAuthorEmail(String e)    { this.authorEmail = e; }
    public void setTitle(String t)          { this.title = t; }
    public void setMessage(String m)        { this.message = m; }
    public void setLikes(long l)            { this.likes = l; }
    public void setViews(long v)            { this.views = v; }

    public String getAvatarUrl() { return avatarUrl; }
    public void setAvatarUrl(String avatarUrl) { this.avatarUrl = avatarUrl; }
    public void addLike(String email) { likedBy.add(email); this.likes = likedBy.size(); }
    public void removeLike(String email) { likedBy.remove(email); this.likes = likedBy.size(); }
    public boolean isLikedByUser() { return likedByUser; }
    public void setLikedByUser(boolean likedByUser) { this.likedByUser = likedByUser; }

    public String getForumCategory() { return forumCategory; }
    public void setForumCategory(String forumCategory) { this.forumCategory = forumCategory; }

    public String getPictureUrl() { return pictureUrl; }
    public void setPictureUrl(String pictureUrl) { this.pictureUrl = pictureUrl; }

    public String getDocumentUrl() { return documentUrl; }
    public void setDocumentUrl(String documentUrl) { this.documentUrl = documentUrl; }
}

package Forum;
import io.quarkus.security.identity.SecurityIdentity;
import jakarta.annotation.security.RolesAllowed;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.transaction.Transactional;
import jakarta.validation.Valid;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import model.User;
import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.*;

@Path("/posts")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class PostResource {

    @Inject
    SecurityIdentity identity;

    @Inject
    EntityManager em;

    @GET
    public List<PostEntity> getAllPosts() {
        List<PostEntity> posts = em.createQuery("SELECT p FROM PostEntity p ORDER BY p.createdAt DESC", PostEntity.class)
                .getResultList();

        String userEmail = identity.getPrincipal().getName();

        for (PostEntity post : posts) {
            String avatar = post.getAvatarUrl();
            if (avatar != null && !avatar.startsWith("http")) {
                String filename = Paths.get(avatar).getFileName().toString();
                post.setAvatarUrl("http://localhost:8080/posts/avatars/" + filename);
            }
            post.setLikedByUser(post.getLikedBy().contains(userEmail));
        }

        return posts;
    }

    @GET
    @Path("/{id}")
    public PostEntity getOne(@PathParam("id") String id) {
        PostEntity post = em.find(PostEntity.class, id);
        if (post == null) throw new NotFoundException("Post not found");
        String avatar = post.getAvatarUrl();
        if (avatar != null && !avatar.startsWith("http")) {
            String filename = Paths.get(avatar).getFileName().toString();
            post.setAvatarUrl("http://localhost:8080/posts/avatars/" + filename);
        }
        String userEmail = identity.getPrincipal().getName();
        post.setLikedByUser(post.getLikedBy().contains(userEmail));

        return post;
    }

    @POST
    @Path("/{id}/like")
    @Transactional
    public Response like(@PathParam("id") String id) {
        String userEmail = identity.getPrincipal().getName();
        PostEntity post = em.find(PostEntity.class, id);

        if (post == null) {
            return Response.status(Response.Status.NOT_FOUND).entity("Post not found").build();
        }

        if (!post.getLikedBy().contains(userEmail)) {
            post.addLike(userEmail);
            System.out.println("✅ User " + userEmail + " liked post " + id);
        } else {
            System.out.println("⚠️ User " + userEmail + " already liked post " + id);
        }

        return Response.ok().entity(Map.of("likes", post.getLikes(), "likedByUser", true)).build();
    }

    @POST
    @Path("/{id}/unlike")
    @Transactional
    public Response unlike(@PathParam("id") String id) {
        String userEmail = identity.getPrincipal().getName();
        PostEntity post = em.find(PostEntity.class, id);

        if (post == null) {
            return Response.status(Response.Status.NOT_FOUND).entity("Post not found").build();
        }

        if (post.getLikedBy().contains(userEmail)) {
            post.removeLike(userEmail);
            System.out.println("✅ User " + userEmail + " unliked post " + id);
        } else {
            System.out.println("⚠️ User " + userEmail + " has not liked post " + id);
        }

        return Response.ok().entity(Map.of("likes", post.getLikes(), "likedByUser", false)).build();

    }

    @POST
    @Transactional
    @RolesAllowed("user")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    @Produces(MediaType.APPLICATION_JSON)
    public Response create(@Valid PostCreateRequest req) {
        String email = identity.getPrincipal().getName();
        String displayName = Optional.ofNullable(req.authorName).filter(s -> !s.isBlank()).orElse(email);

        User user = em.createQuery("SELECT u FROM User u WHERE u.email = :email", User.class)
                .setParameter("email", email)
                .getSingleResult();

        PostEntity post = new PostEntity();
        post.setAuthorName(displayName);
        post.setAuthorEmail(email);
        post.setTitle(req.title);
        post.setMessage(req.message);
        post.setForumCategory(req.forumCategory);

        if (user.getAvatar() != null) {
            post.setAvatarUrl(user.getAvatar());
        }
        post.persist();

        // ====== บันทึกรูปหน้าปก (คงสไตล์ NIO เดิม) ======
        String filename = post.getId() + ".jpg";
        if(req.picture != null){
            try {
                String originalName = req.pictureFileName != null ? req.pictureFileName : "picture.jpeg";
                java.nio.file.Path dir = java.nio.file.Paths.get("uploads/picture");
                java.nio.file.Files.createDirectories(dir);
                java.nio.file.Path picturePath = dir.resolve(filename);
                java.nio.file.Files.copy(req.picture, picturePath, StandardCopyOption.REPLACE_EXISTING);

                System.out.println("Picture path : " + picturePath.toString());
                System.out.println("Original file name: " + originalName);
                post.setPictureUrl("uploads/picture/" + filename);
            } catch (Exception e) {
                throw new InternalServerErrorException("Failed to save photo.");
            }
        }

        // ====== ใหม่: บันทึกเอกสารโพสต์ (ไฟล์เดียว) ======
        if (req.document != null) {
            try {
                String originalDoc = (req.documentFileName != null && !req.documentFileName.isBlank())
                        ? req.documentFileName : "document.bin";

                // สกัดนามสกุลอย่างปลอดภัยเล็กน้อย
                String docExt = "";
                int dot = originalDoc.lastIndexOf('.');
                if (dot >= 0 && dot < originalDoc.length() - 1) {
                    String extCandidate = originalDoc.substring(dot).toLowerCase();
                    if (extCandidate.matches("\\.[a-z0-9]{1,10}")) {
                        docExt = extCandidate;
                    }
                }

                String docFileName = post.getId() + (docExt.isEmpty() ? "" : docExt);

                java.nio.file.Path dir = java.nio.file.Paths.get("uploads/postDocuments");
                java.nio.file.Files.createDirectories(dir);
                java.nio.file.Path docPath = dir.resolve(docFileName);
                java.nio.file.Files.copy(req.document, docPath, StandardCopyOption.REPLACE_EXISTING);

                System.out.println("Document path : " + docPath.toString());
                System.out.println("Original document name: " + originalDoc);

                post.setDocumentUrl("uploads/postDocuments/" + docFileName);
            } catch (Exception e) {
                throw new InternalServerErrorException("Failed to save document.");
            }
        }

        return Response.created(URI.create("/posts/" + post.getId()))
                .entity(post)
                .build();
    }

    @GET
    @Path("/picture/{filename}")
    @Produces({"image/jpeg", "image/png", "image/webp"})
    public Response getPicture(@PathParam("filename") String filename) {
        java.nio.file.Path picturePath = java.nio.file.Paths.get("uploads/picture/" + filename);
        if (!picturePath.toFile().exists()) {
            return Response.status(Response.Status.NOT_FOUND).entity("Picture not found").build();
        }
        try {
            return Response.ok().entity(picturePath.toFile()).build();
        }catch(Exception e){
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
        }
    }

    // ใหม่: เสิร์ฟไฟล์เอกสารของโพสต์
    @GET
    @Path("/postDocument/{filename}")
    public Response getPostDocument(@PathParam("filename") String filename){
        try {
            java.nio.file.Path file = Paths.get("uploads/postDocuments", filename);
            if (!Files.exists(file)) {
                throw new NotFoundException("File not found: " + filename);
            }

            String mimeType = Files.probeContentType(file);
            if (mimeType == null) {
                mimeType = "application/octet-stream";
            }

            return Response.ok(Files.newInputStream(file))
                    .type(mimeType)
                    .header("Content-Disposition", "inline; filename=\"" + filename + "\"")
                    .build();

        } catch (IOException e) {
            throw new InternalServerErrorException("Failed to load document: " + filename, e);
        }
    }
}
//    @ElementCollection(fetch = FetchType.EAGER)
//    @CollectionTable(name = "post_attachments", joinColumns = @JoinColumn(name = "post_id"))
//    private java.util.List<AttachmentMeta> attachments = new java.util.ArrayList<>();

    public java.util.List<AttachmentMeta> getAttachments() { return attachments; }
    public void setAttachments(java.util.List<AttachmentMeta> attachments) { this.attachments = attachments; }



    import { useContext, useEffect, useState } from "react";
import type { Post, Comment } from "./KnowledgeForumLayout.tsx";
import { AuthContext } from "../../Authentication/AuthContext.tsx";
import {
  // FaEye,
  FaCommentDots,
  FaHeart,
  FaRegHeart,
} from "react-icons/fa";

type Props = {
  post: Post;
};

const PostCardWidget = ({ post }: Props) => {
  const { token, user } = useContext(AuthContext);
  const [showComments, setShowComments] = useState(false);
  const [commentText, setCommentText] = useState("");
  const [comments, setComments] = useState<Comment[]>(post.comments);

  const [likes, setLikes] = useState(post.likes);
  const [liked, setLiked] = useState(post.likedByUser ?? false);
  const [liking, setLiking] = useState(false);

  const [userProfile, setUserProfile] = useState<{
    name: string;
    email: string;
    avatarUrl?: string;
  } | null>(null);

  const userEmail = user?.email || user?.upn;

  useEffect(() => {
    const fetchUserProfile = async () => {
      if (!token) return;
      try {
        const res = await fetch(`/api/profile`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        if (!res.ok) throw new Error("Failed to fetch user profile");
        const data = await res.json();
        setUserProfile(data);
      } catch (err) {
        console.error("❌ Failed to fetch user profile:", err);
      }
    };
    fetchUserProfile();
  }, [token]);

  const fetchComments = async () => {
    try {
      const res = await fetch(`/api/forum/posts/${post.id}/comments`, {
        headers: token ? { Authorization: `Bearer ${token}` } : {},
      });
      if (!res.ok) throw new Error("Failed to fetch comments");
      const data = await res.json();
      setComments(data);
    } catch (err) {
      console.error("❌ Failed to load comments:", err);
    }
  };

  const handleCommentSubmit = async () => {
    const trimmed = commentText.trim();
    if (!trimmed) return;

    try {
      const payload = {
        message: trimmed,
        authorName: user?.name || "Anonymous",
        authorEmail: userEmail || "unknown@example.com",
        avatarUrl: userProfile?.avatarUrl || "",
      };

      const res = await fetch(`/api/forum/posts/${post.id}/comments`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          ...(token ? { Authorization: `Bearer ${token}` } : {}),
        },
        body: JSON.stringify(payload),
      });

      if (!res.ok) throw new Error("Failed to submit comment");

      setCommentText("");
      await fetchComments();
    } catch (err) {
      console.error("❌ Failed to submit comment:", err);
    }
  };

  const handleToggleComments = async () => {
    const willShow = !showComments;
    setShowComments(willShow);
    if (willShow && comments.length === 0) {
      await fetchComments();
    }
  };

  const handleToggleLike = async () => {
    if (!userEmail || liking) return;

    setLiking(true);
    const endpoint = liked ? "unlike" : "like";
    const nextLiked = !liked;
    const optimisticLikes = liked ? likes - 1 : likes + 1;

    setLiked(nextLiked);
    setLikes(optimisticLikes);

    try {
      const res = await fetch(`/api/posts/${post.id}/${endpoint}`, {
        method: "POST",
        headers: token ? { Authorization: `Bearer ${token}` } : {},
      });

      if (!res.ok) throw new Error("Failed to toggle like");

      const data = await res.json();
      if (typeof data.likes === "number") setLikes(data.likes);
      if (typeof data.likedByUser === "boolean") setLiked(data.likedByUser ?? false);
    } catch (err) {
      console.error("❌ Failed to toggle like:", err);
      setLiked(!nextLiked);
      setLikes(likes);
    } finally {
      setLiking(false);
    }
  };

  const linkify = (text: string): string => {
    const urlRegex = /(\bhttps?:\/\/[^\s]+)/g;
    return text.replace(urlRegex, (url) => {
      const safeUrl = url.replace(/"/g, "&quot;");
      return `<a href="${safeUrl}" target="_blank" rel="noopener noreferrer" class="text-blue-600 underline">${url}</a>`;
    });
  };

  const renderAvatar = () => {
    if (post.avatarUrl) {
      const isFullUrl = post.avatarUrl.startsWith("http");
      const filename = post.avatarUrl.split("/").pop();
      const avatarUrl = isFullUrl ? `/api/profile/avatars/${filename}` : "";

      return (
        <img
          src={avatarUrl}
          alt="Avatar"
          className="w-10 h-10 rounded-full object-cover border"
          onError={(e) => (e.currentTarget.style.display = "none")}
        />
      );
    }
    return (
      <div className="w-10 h-10 bg-blue-500 text-white rounded-full flex items-center justify-center font-bold text-sm">
        {post.authorName?.charAt(0)?.toUpperCase() || "?"}
      </div>
    );
  };

  // -------- Document support: สร้างลิงก์เปิดดู/ดาวน์โหลดถ้ามีเอกสาร --------
  const formatDocumentUrl = (raw?: string): string | undefined => {
    if (!raw) return undefined;
    if (raw.startsWith("http")) return raw; // รองรับกรณีมี CDN/external
    const filename = raw.split("/").pop();
    if (!filename) return undefined;
    return `/api/posts/postDocument/${encodeURIComponent(filename)}`;
  };
  const rawDoc: string | undefined = (post as any).documentUrl;
  const documentUrl = formatDocumentUrl(rawDoc);
  const docFileName = rawDoc ? decodeURIComponent(rawDoc.split("/").pop() || "") : "";

  return (
    <article className="bg-white rounded-lg shadow p-4">
      {/* Header */}
      <header className="flex items-center gap-3 mb-3">
        {renderAvatar()}
        <div>
          <p className="text-sm font-semibold text-gray-800">
            {post.authorName}
          </p>
          <p className="text-xs text-gray-500">{post.authorEmail}</p>
          <p className="text-xs text-gray-400">
            {new Date(post.createdAt).toLocaleString()}
          </p>
        </div>
      </header>

      <h2 className="text-base font-semibold text-gray-800">{post.title}</h2>
      <p
        className="text-sm text-gray-700 mt-1 whitespace-pre-line"
        dangerouslySetInnerHTML={{ __html: linkify(post.message) }}
      />

      {post.pictureUrl && (
        <div className="mt-3">
          {(() => {
            const filename = post.pictureUrl.split("/").pop();
            return (
              <img
                src={`/api/posts/picture/${filename}`}
                alt="Post Image"
                className="w-full max-h-96 object-cover rounded-md border"
              />
            );
          })()}
        </div>
      )}

      {/* เอกสารแนบของโพสต์ (เปิดดู/ดาวน์โหลด) */}
      {documentUrl && (
        <div className="mt-3 border rounded-md p-3 bg-gray-50">
          <h4 className="text-sm font-medium mb-2">ไฟล์เอกสาร</h4>
          <div className="flex flex-wrap items-center gap-2">
            <span className="text-xs text-gray-700 truncate max-w-[60%]" title={docFileName}>
              {docFileName}
            </span>

            {/* ปุ่มเปิดดู (inline) */}
            <a
              href={documentUrl}
              target="_blank"
              rel="noopener noreferrer"
              className="px-3 py-1 text-xs rounded bg-gray-200 hover:bg-gray-300"
            >
              เปิดดู
            </a>

            {/* ปุ่มดาวน์โหลด (บังคับดาวน์โหลดฝั่งเบราว์เซอร์) */}
            <a
              href={documentUrl}
              download={docFileName || true}
              className="px-3 py-1 text-xs rounded bg-blue-600 text-white hover:bg-blue-700"
            >
              ดาวน์โหลด
            </a>
          </div>
        </div>
      )}

      <div className="flex gap-4 text-xs text-gray-500 mt-3 items-center">
        {/* <span className="flex items-center gap-1">
          <FaEye /> {post.views}
        </span> */}

        <button
          type="button"
          onClick={handleToggleComments}
          className="hover:underline flex items-center gap-1"
        >
          <FaCommentDots /> {comments.length}
        </button>

        <button
          type="button"
          onClick={handleToggleLike}
          disabled={liking}
          className={`hover:underline flex items-center gap-1 ${
            liked ? "text-red-600 font-bold" : ""
          }`}
        >
          {liked ? <FaHeart /> : <FaRegHeart />} {likes}
        </button>
      </div>

      {showComments && (
        <section className="mt-4 space-y-2 border-t pt-4">
          {comments.length === 0 ? (
            <p className="text-xs text-gray-400">No comments yet.</p>
          ) : (
            comments.map((c) => (
              <div key={c.id} className="flex items-start gap-2 text-xs">
                {c.avatarUrl ? (
                  <img
                    src={`/api/profile/avatars/${c.avatarUrl.split("/").pop()}`}
                    alt="User avatar"
                    className="w-6 h-6 rounded-full object-cover border"
                  />
                ) : (
                  <div className="w-6 h-6 bg-gray-400 text-white rounded-full flex items-center justify-center text-[10px] font-bold">
                    {c.authorName?.charAt(0)?.toUpperCase() || "?"}
                  </div>
                )}
                <div>
                  <p className="font-medium">{c.authorName}</p>
                  <p className="text-gray-700 whitespace-pre-line">{c.message}</p>
                  <p className="text-[10px] text-gray-400">
                    {new Date(c.createdAt).toLocaleString()}
                  </p>
                </div>
              </div>
            ))
          )}

          <div className="mt-3">
            <textarea
              value={commentText}
              onChange={(e) => setCommentText(e.target.value)}
              className="w-full border border-gray-300 rounded p-2 text-xs focus:outline-none focus:ring focus:ring-blue-200"
              rows={3}
              placeholder="Add a comment..."
            />
            <div className="flex justify-end mt-2">
              <button
                type="button"
                onClick={handleCommentSubmit}
                disabled={!commentText.trim()}
                className="bg-blue-600 text-white px-4 py-1 rounded text-xs font-medium hover:bg-blue-700 disabled:opacity-40"
              >
                Submit
              </button>
            </div>
          </div>
        </section>
      )}
    </article>
  );
};

export default PostCardWidget;
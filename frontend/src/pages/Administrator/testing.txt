üîß Backend (Quarkus)
src/main/java/Forum/AttachmentMeta.java (‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà)
java
Copy
Edit
package Forum;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;

@Embeddable
public class AttachmentMeta {

    @Column(name = "file_name", nullable = false, length = 255)
    private String filename;         // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå

    @Column(name = "original_name", length = 255)
    private String originalName;     // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î

    @Column(name = "mime_type", length = 127)
    private String mimeType;         // Content-Type

    @Column(name = "file_size")
    private long size;               // ‡∏Ç‡∏ô‡∏≤‡∏î (‡πÑ‡∏ö‡∏ï‡πå)

    public AttachmentMeta() {}

    public AttachmentMeta(String filename, String originalName, String mimeType, long size) {
        this.filename = filename;
        this.originalName = originalName;
        this.mimeType = mimeType;
        this.size = size;
    }

    public String getFilename() { return filename; }
    public String getOriginalName() { return originalName; }
    public String getMimeType() { return mimeType; }
    public long getSize() { return size; }

    public void setFilename(String filename) { this.filename = filename; }
    public void setOriginalName(String originalName) { this.originalName = originalName; }
    public void setMimeType(String mimeType) { this.mimeType = mimeType; }
    public void setSize(long size) { this.size = size; }
}
src/main/java/Forum/PostEntity.java (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏ü‡∏•‡πå)
java
Copy
Edit
package Forum;

import com.aventrix.jnanoid.jnanoid.NanoIdUtils;
import io.quarkus.hibernate.orm.panache.PanacheEntityBase;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import model.CommentEntity;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "posts")
public class PostEntity extends PanacheEntityBase {
    @Id
    @Column(length = 21, nullable = false, updatable = false)
    private String id;

    @NotBlank
    @Size(max = 100)
    @Column(name = "author_name", nullable = false, length = 100)
    private String authorName;

    @NotBlank
    @Column(name = "author_email", nullable = false, length = 150)
    private String authorEmail;

    @NotBlank
    @Size(max = 255)
    private String title;

    @NotBlank
    @Column(nullable = false, columnDefinition = "TEXT")
    private String message;

    @Column(nullable = false)
    private long likes = 0;

    @Column(nullable = false)
    private long views = 0;

    @Column(name = "forum_category")
    private String forumCategory;

    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @Column(length = 512, name = "avatarurl")
    private String avatarUrl;

    @Transient
    private boolean likedByUser;

    @ElementCollection
    @CollectionTable(name = "post_likes", joinColumns = @JoinColumn(name = "post_id"))
    @Column(name = "user_email")
    private Set<String> likedBy = new HashSet<>();

    @Column(name = "pictureUrl")
    private String pictureUrl;

    // ‡πÉ‡∏´‡∏°‡πà: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
    @ElementCollection(fetch = FetchType.EAGER)
    @CollectionTable(name = "post_attachments", joinColumns = @JoinColumn(name = "post_id"))
    private java.util.List<AttachmentMeta> attachments = new java.util.ArrayList<>();

    @PrePersist
    void prePersist() {
        if (id == null || id.isBlank()) id = NanoIdUtils.randomNanoId();
        createdAt  = LocalDateTime.now();
        updatedAt  = createdAt;
    }

    @OneToMany(mappedBy = "post", cascade = CascadeType.ALL, orphanRemoval = true)
    private java.util.List<model.CommentEntity> comments = new java.util.ArrayList<>();

    @PreUpdate
    void preUpdate() { updatedAt = LocalDateTime.now(); }

    public String getId()            { return id; }
    public String getAuthorName()    { return authorName; }
    public String getAuthorEmail()   { return authorEmail; }
    public String getTitle()         { return title; }
    public String getMessage()       { return message; }
    public long   getLikes()         { return likes; }
    public long   getViews()         { return views; }
    public LocalDateTime getCreatedAt() { return createdAt; }
    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public Set<String> getLikedBy()  { return likedBy; }

    public void setAuthorName(String n)     { this.authorName = n; }
    public void setAuthorEmail(String e)    { this.authorEmail = e; }
    public void setTitle(String t)          { this.title = t; }
    public void setMessage(String m)        { this.message = m; }
    public void setLikes(long l)            { this.likes = l; }
    public void setViews(long v)            { this.views = v; }

    public String getAvatarUrl() { return avatarUrl; }
    public void setAvatarUrl(String avatarUrl) { this.avatarUrl = avatarUrl; }

    public void addLike(String email) {
        likedBy.add(email);
        this.likes = likedBy.size();
    }

    public void removeLike(String email) {
        likedBy.remove(email);
        this.likes = likedBy.size();
    }

    public boolean isLikedByUser() { return likedByUser; }
    public void setLikedByUser(boolean likedByUser) { this.likedByUser = likedByUser; }

    public String getForumCategory() { return forumCategory; }
    public void setForumCategory(String forumCategory) { this.forumCategory = forumCategory; }

    public String getPictureUrl() { return pictureUrl; }
    public void setPictureUrl(String pictureUrl) { this.pictureUrl = pictureUrl; }

    public java.util.List<AttachmentMeta> getAttachments() { return attachments; }
    public void setAttachments(java.util.List<AttachmentMeta> attachments) { this.attachments = attachments; }
}
src/main/java/Forum/PostCreateRequest.java (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏ü‡∏•‡πå)
java
Copy
Edit
package Forum;

import org.jboss.resteasy.reactive.RestForm;
import org.jboss.resteasy.reactive.multipart.FileUpload;

import java.util.List;

public class PostCreateRequest {

    @RestForm public String title;
    @RestForm public String message;
    @RestForm public String authorName;
    @RestForm public String forumCategory;

    // ‡∏£‡∏π‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏Å (‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß, ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
    @RestForm public FileUpload picture;
    @RestForm public String pictureFileName; // optional

    // ‡πÉ‡∏´‡∏°‡πà: ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ï‡πâ‡∏Ñ‡∏µ‡∏¢‡πå "attachments"
    @RestForm public List<FileUpload> attachments;
}
src/main/java/Forum/PostResource.java (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏ü‡∏•‡πå)
java
Copy
Edit
package Forum;

import com.aventrix.jnanoid.jnanoid.NanoIdUtils;
import io.quarkus.security.identity.SecurityIdentity;
import jakarta.annotation.security.RolesAllowed;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.transaction.Transactional;
import jakarta.validation.Valid;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import model.User;
import org.jboss.resteasy.reactive.multipart.FileUpload;

import java.io.IOException;
import java.net.URI;
import java.nio.file.*;
import java.util.*;

@Path("/posts")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class PostResource {

    @Inject
    SecurityIdentity identity;

    @Inject
    EntityManager em;

    @GET
    public List<PostEntity> getAllPosts() {
        List<PostEntity> posts = em.createQuery("SELECT p FROM PostEntity p ORDER BY p.createdAt DESC", PostEntity.class)
                .getResultList();

        String userEmail = identity.getPrincipal().getName();

        for (PostEntity post : posts) {
            String avatar = post.getAvatarUrl();
            if (avatar != null && !avatar.startsWith("http")) {
                String filename = Paths.get(avatar).getFileName().toString();
                // map ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏≠‡πá‡∏ô‡∏î‡πå‡∏û‡∏≠‡∏¢‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏ü‡∏•‡πå avatar
                post.setAvatarUrl("http://localhost:8080/posts/avatars/" + filename);
            }
            post.setLikedByUser(post.getLikedBy().contains(userEmail));
        }

        return posts;
    }

    @GET
    @Path("/{id}")
    public PostEntity getOne(@PathParam("id") String id) {
        PostEntity post = em.find(PostEntity.class, id);
        if (post == null) throw new NotFoundException("Post not found");

        String avatar = post.getAvatarUrl();
        if (avatar != null && !avatar.startsWith("http")) {
            String filename = Paths.get(avatar).getFileName().toString();
            post.setAvatarUrl("http://localhost:8080/posts/avatars/" + filename);
        }
        String userEmail = identity.getPrincipal().getName();
        post.setLikedByUser(post.getLikedBy().contains(userEmail));

        return post;
    }

    @POST
    @Path("/{id}/like")
    @Transactional
    public Response like(@PathParam("id") String id) {
        String userEmail = identity.getPrincipal().getName();
        PostEntity post = em.find(PostEntity.class, id);

        if (post == null) {
            return Response.status(Response.Status.NOT_FOUND).entity("Post not found").build();
        }

        if (!post.getLikedBy().contains(userEmail)) {
            post.addLike(userEmail);
            System.out.println("‚úÖ User " + userEmail + " liked post " + id);
        } else {
            System.out.println("‚ö†Ô∏è User " + userEmail + " already liked post " + id);
        }

        return Response.ok().entity(Map.of("likes", post.getLikes(), "likedByUser", true)).build();
    }

    @POST
    @Path("/{id}/unlike")
    @Transactional
    public Response unlike(@PathParam("id") String id) {
        String userEmail = identity.getPrincipal().getName();
        PostEntity post = em.find(PostEntity.class, id);

        if (post == null) {
            return Response.status(Response.Status.NOT_FOUND).entity("Post not found").build();
        }

        if (post.getLikedBy().contains(userEmail)) {
            post.removeLike(userEmail);
            System.out.println("‚úÖ User " + userEmail + " unliked post " + id);
        } else {
            System.out.println("‚ö†Ô∏è User " + userEmail + " has not liked post " + id);
        }

        return Response.ok().entity(Map.of("likes", post.getLikes(), "likedByUser", false)).build();
    }

    // ---------- Create post + ‡∏£‡∏π‡∏õ + ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö ----------
    @POST
    @Transactional
    @RolesAllowed("user")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    @Produces(MediaType.APPLICATION_JSON)
    public Response create(@Valid PostCreateRequest req) {
        String email = identity.getPrincipal().getName();
        String displayName = Optional.ofNullable(req.authorName).filter(s -> !s.isBlank()).orElse(email);

        User user = em.createQuery("SELECT u FROM User u WHERE u.email = :email", User.class)
                .setParameter("email", email)
                .getSingleResult();

        PostEntity post = new PostEntity();
        post.setAuthorName(displayName);
        post.setAuthorEmail(email);
        post.setTitle(req.title);
        post.setMessage(req.message);
        post.setForumCategory(req.forumCategory);

        if (user.getAvatar() != null) {
            post.setAvatarUrl(user.getAvatar());
        }
        post.persist(); // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ id ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå

        // ‡∏£‡∏π‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏Å
        if (req.picture != null) {
            try {
                Path dir = Paths.get("uploads/picture");
                Files.createDirectories(dir);

                String originalName = (req.pictureFileName != null && !req.pictureFileName.isBlank())
                        ? req.pictureFileName
                        : req.picture.fileName();

                String ext = getSafeExtension(originalName, ".jpg");
                String filename = post.getId() + ext;

                Path target = dir.resolve(filename);
                Files.move(req.picture.uploadedFile().toPath(), target, StandardCopyOption.REPLACE_EXISTING);

                System.out.println("Picture path : " + target);
                System.out.println("Original file name: " + originalName);

                post.setPictureUrl("uploads/picture/" + filename);
            } catch (Exception e) {
                throw new InternalServerErrorException("Failed to save photo.");
            }
        }

        // ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå
        if (req.attachments != null && !req.attachments.isEmpty()) {
            try {
                Path dir = Paths.get("uploads/posts", post.getId(), "attachments");
                Files.createDirectories(dir);

                for (FileUpload fu : req.attachments) {
                    if (fu == null) continue;

                    String safeOriginal = sanitizeFileName(fu.fileName());
                    String storedName = NanoIdUtils.randomNanoId() + "-" + safeOriginal;

                    Path target = dir.resolve(storedName);
                    Files.move(fu.uploadedFile().toPath(), target, StandardCopyOption.REPLACE_EXISTING);

                    String mime = Optional.ofNullable(fu.contentType()).orElseGet(() -> probeType(target));
                    long size = Files.size(target);

                    post.getAttachments().add(new AttachmentMeta(storedName, fu.fileName(), mime, size));
                }
            } catch (Exception e) {
                throw new InternalServerErrorException("Failed to save attachments.");
            }
        }

        return Response.created(URI.create("/posts/" + post.getId()))
                .entity(post)
                .build();
    }

    // ---------- ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö ----------
    @GET
    @Path("/{id}/attachments/{filename}")
    public Response getAttachment(
            @PathParam("id") String id,
            @PathParam("filename") String filename,
            @QueryParam("download") @DefaultValue("false") boolean download) {

        Path path = Paths.get("uploads/posts", id, "attachments", filename);
        if (!Files.exists(path)) {
            return Response.status(Response.Status.NOT_FOUND).entity("Attachment not found").build();
        }

        String contentType = probeType(path);
        Response.ResponseBuilder rb = Response.ok(path.toFile()).type(contentType);

        boolean inline = isInlinePreviewable(contentType) && !download;
        String disposition = (inline ? "inline" : "attachment") + "; filename=\"" + filename + "\"";
        rb.header("Content-Disposition", disposition);

        return rb.build();
    }

    // ---------- ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏£‡∏π‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏Å ----------
    @GET
    @Path("/picture/{filename}")
    @Produces({"image/jpeg", "image/png", "image/webp"})
    public Response getPicture(@PathParam("filename") String filename) {
        Path picturePath = Paths.get("uploads/picture/" + filename);
        if (!picturePath.toFile().exists()) {
            return Response.status(Response.Status.NOT_FOUND).entity("Picture not found").build();
        }
        try {
            return Response.ok().entity(picturePath.toFile()).build();
        } catch (Exception e) {
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
        }
    }

    // ---------- (‡πÄ‡∏™‡∏£‡∏¥‡∏°) ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü Avatar ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á URL ‡∏ó‡∏µ‡πà getAllPosts ‡∏™‡∏£‡πâ‡∏≤‡∏á ----------
    @GET
    @Path("/avatars/{filename}")
    @Produces({"image/jpeg", "image/png", "image/webp"})
    public Response getAvatar(@PathParam("filename") String filename) {
        Path avatarPath = Paths.get("uploads/avatars/" + filename);
        if (!avatarPath.toFile().exists()) {
            return Response.status(Response.Status.NOT_FOUND).entity("Avatar not found").build();
        }
        try {
            return Response.ok().entity(avatarPath.toFile()).build();
        } catch (Exception e) {
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
        }
    }

    // ---------- Helpers ----------
    private static String probeType(Path p) {
        try { return Optional.ofNullable(Files.probeContentType(p)).orElse("application/octet-stream"); }
        catch (IOException e) { return "application/octet-stream"; }
    }

    private static boolean isInlinePreviewable(String contentType) {
        if (contentType == null) return false;
        return contentType.startsWith("image/")
                || contentType.startsWith("audio/")
                || contentType.startsWith("video/")
                || contentType.equals("application/pdf");
    }

    private static String getSafeExtension(String name, String fallback) {
        if (name == null) return fallback;
        int i = name.lastIndexOf('.');
        if (i < 0) return fallback;
        String ext = name.substring(i).toLowerCase(Locale.ROOT);
        return ext.matches("\\.[a-z0-9]{1,10}") ? ext : fallback;
    }

    private static String sanitizeFileName(String name) {
        if (name == null || name.isBlank()) return "file";
        return name.replaceAll("[^a-zA-Z0-9._-]+", "_");
    }
}
üñ•Ô∏è Frontend (React/TypeScript)
‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≤‡∏° path ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ ‚Äî ‡∏ñ‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö path import ‡∏ï‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á

src/pages/forum/AddPostWidget.tsx (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏ü‡∏•‡πå)
tsx
Copy
Edit
import { useState, useContext } from "react";
import { AuthContext } from "../../Authentication/AuthContext.tsx";

const categories = ["‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ","‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£ IT","IT & ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"];

// ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢
const MAX_FILES = 10;
const MAX_FILE_SIZE_MB = 20;

const AddPostWidget = ({ onCreated }: { onCreated?: () => void }) => {
  const { user, token } = useContext(AuthContext);

  const [open, setOpen] = useState(false);
  const [title, setTitle] = useState("");
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(false);
  const [errorMsg, setErrorMsg] = useState("");
  const [forumCategory, setforumCategory] = useState("");
  const [picture, setPicture] = useState<File | null>(null);

  // ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏ô‡∏¥‡∏î/‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå
  const [attachments, setAttachments] = useState<File[]>([]);

  const delay = (ms: number) => new Promise(res => setTimeout(res, ms));

  const formatBytes = (bytes: number) => {
    if (bytes === 0) return "0 B";
    const k = 1024;
    const sizes = ["B","KB","MB","GB","TB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  };

  const onAddAttachments = (files: FileList | null) => {
    if (!files) return;
    const incoming = Array.from(files);

    if (attachments.length + incoming.length > MAX_FILES) {
      setErrorMsg(`‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô ${MAX_FILES} ‡πÑ‡∏ü‡∏•‡πå`);
      return;
    }
    const oversized = incoming.find(f => f.size > MAX_FILE_SIZE_MB * 1024 * 1024);
    if (oversized) {
      setErrorMsg(`‡πÑ‡∏ü‡∏•‡πå "${oversized.name}" ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏ô ${MAX_FILE_SIZE_MB} MB`);
      return;
    }

    const map = new Map<string, File>();
    [...attachments, ...incoming].forEach(f => map.set(`${f.name}-${f.size}-${f.lastModified}`, f));
    setAttachments(Array.from(map.values()));
    setErrorMsg("");
  };

  const removeAttachmentAt = (idx: number) =>
    setAttachments(prev => prev.filter((_, i) => i !== idx));

  const handleSubmit = async () => {
    if (!title.trim() || !message.trim()) {
      setErrorMsg("Please fill in both title and message.");
      return;
    }
    if (!forumCategory) {
      setErrorMsg("Please select a category");
      return;
    }

    setLoading(true);
    setErrorMsg("");

    try {
      await delay(500);

      const formData = new FormData();
      formData.append("title", title);
      formData.append("message", message);
      formData.append("authorName", user?.name ?? "Unknown");
      formData.append("forumCategory", forumCategory);

      if (picture) {
        formData.append("picture", picture);
        formData.append("pictureFileName", picture.name);
      }

      attachments.forEach(file => {
        formData.append("attachments", file, file.name);
      });

      // Debug
      console.log("FormData payload:");
      formData.forEach((value, key) => {
        if (value instanceof File) {
          console.log(`${key}: [File] name=${value.name}, size=${value.size}, type=${value.type}`);
        } else {
          console.log(`${key}: ${value}`);
        }
      });

      const res = await fetch("/api/posts", {
        method: "POST",
        headers: { Authorization: `Bearer ${token}` },
        body: formData,
      });

      if (res.ok) {
        setOpen(false);
        setTitle("");
        setMessage("");
        setforumCategory("");
        setPicture(null);
        setAttachments([]);
        onCreated?.();
      } else {
        const err = await res.json().catch(() => ({}));
        setErrorMsg(err.message ?? "Failed to create post");
      }
    } catch (err) {
      setErrorMsg("Something went wrong. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <button
        className="fixed bottom-6 right-6 z-50 bg-blue-600 text-white rounded-full px-4 py-2 shadow-lg hover:bg-blue-700"
        onClick={() => setOpen(true)}
        aria-label="Create new post"
      >
        + New Post
      </button>

      {open && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-lg p-6 w-full max-w-md">
            <h2 className="text-lg font-semibold mb-4">Create new post</h2>

            <p className="text-sm mb-2 text-gray-600">
              Author: <b>{user?.name ?? "Unknown"}</b>
            </p>

            <input
              className="w-full border rounded px-3 py-2 mb-2"
              placeholder="Title"
              maxLength={255}
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />

            <select
              className="w-full border rounded px-3 py-2 mb-2"
              value={forumCategory}
              onChange={(e) => setforumCategory(e.target.value)}
            >
              <option value="" disabled>Select a category</option>
              {categories.map((cat) => (
                <option key={cat} value={cat}>
                  {cat}
                </option>
              ))}
            </select>

            <label className="block text-sm text-gray-700 mb-1">‡∏£‡∏π‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏Å (image/*)</label>
            <input
              className="mb-3"
              type="file"
              accept="image/*"
              onChange={(e) => setPicture(e.target.files?.[0] ?? null)}
            />

            <label className="block text-sm text-gray-700 mb-1">‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÜ (‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏ô‡∏¥‡∏î/‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå)</label>
            <input
              className="mb-2"
              type="file"
              multiple
              accept={[
                ".pdf",".doc",".docx",".xls",".xlsx",".ppt",".pptx",".txt",".csv",".zip",
                "application/pdf",
                "application/msword",
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "application/vnd.ms-powerpoint",
                "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                "text/plain","text/csv","application/zip"
              ].join(",")}
              onChange={(e) => onAddAttachments(e.target.files)}
            />

            {attachments.length > 0 && (
              <ul className="mb-3 max-h-28 overflow-auto border rounded p-2 text-sm">
                {attachments.map((file, idx) => (
                  <li key={`${file.name}-${file.size}-${file.lastModified}`} className="flex items-center justify-between gap-2 py-1">
                    <span className="truncate">{file.name} <span className="text-gray-500">({formatBytes(file.size)})</span></span>
                    <button
                      type="button"
                      onClick={() => removeAttachmentAt(idx)}
                      className="text-red-600 hover:underline"
                      aria-label={`‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå ${file.name}`}
                    >
                      ‡∏•‡∏ö
                    </button>
                  </li>
                ))}
              </ul>
            )}

            <textarea
              className="w-full border rounded px-3 py-2 h-28 mb-4"
              placeholder="Message"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
            />

            {errorMsg && (
              <div className="text-red-600 text-sm mb-3">{errorMsg}</div>
            )}

            <div className="flex justify-end gap-2">
              <button
                onClick={() => setOpen(false)}
                className="px-4 py-2 border rounded hover:bg-gray-100"
              >
                Cancel
              </button>

              <button
                onClick={handleSubmit}
                disabled={loading}
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2"
              >
                {loading ? (
                  <>
                    <span className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full" />
                    Posting‚Ä¶
                  </>
                ) : (
                  "Post"
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default AddPostWidget;
src/pages/forum/KnowledgeForumLayout.tsx (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏ü‡∏•‡πå)
tsx
Copy
Edit
import { useState, useEffect, useContext } from "react";
import { AuthContext } from "../../Authentication/AuthContext.tsx";
import Sidebar from "../../widgets/SidebarWidget";
import PostCardWidget from "./PostCardWidget.tsx";
import AddPostWidget from "./AddPostWidget.tsx";

export type Comment = {
  avatarUrl: string;
  id: string;
  authorName: string;
  message: string;
  createdAt: string;
};

export type Attachment = {
  filename: string;
  originalName?: string;
  mimeType?: string;
  size?: number;
  url?: string; // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡πá‡∏Å‡πÄ‡∏≠‡∏ô‡∏î‡πå‡∏™‡πà‡∏á url ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á ‡πÜ
};

export type Post = {
  likedByUser: boolean;
  id: string;
  authorName: string;
  authorEmail: string;
  title: string;
  message: string;
  avatarUrl?: string;
  createdAt: string;
  views: number;
  likes: number;
  likedBy: string[];
  comments: Comment[];
  forumCategory: string;
  attachments?: Attachment[];
  pictureUrl?: string;
};

const formatAvatarUrl = (rawUrl?: string): string | undefined => {
  if (!rawUrl) return undefined;
  if (rawUrl.startsWith("http")) return rawUrl;
  const parts = rawUrl.split("/");
  const filename = parts[parts.length - 1];
  return `/api/posts/avatars/${filename}`;
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏à‡∏≤‡∏Å postId+filename ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡πá‡∏Å‡πÄ‡∏≠‡∏ô‡∏î‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á url ‡∏°‡∏≤‡πÉ‡∏´‡πâ
const formatAttachmentUrl = (postId: string, raw?: string): string => {
  if (!raw) return "";
  if (raw.startsWith("http")) return raw;
  const parts = raw.split("/");
  const filename = parts[parts.length - 1];
  return `/api/posts/${postId}/attachments/${encodeURIComponent(filename)}`;
};

const normalizeAttachments = (postId: string, raw?: Attachment[] | any[]): Attachment[] => {
  if (!raw || raw.length === 0) return [];
  return raw.map((item: any) => {
    if (typeof item === "string") {
      return { filename: item.split("/").pop() || item, url: formatAttachmentUrl(postId, item) };
    }
    const filename = item.filename ?? item.originalName ?? item.name ?? item.path ?? "file";
    const url = item.url ?? formatAttachmentUrl(postId, item.filename ?? item.path ?? filename);
    return {
      filename,
      originalName: item.originalName ?? item.name,
      mimeType: item.mimeType,
      size: item.size,
      url,
    };
  });
};

const KnowledgeForumLayout = () => {
  const { token } = useContext(AuthContext);
  const [posts, setPosts] = useState<Post[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [selectedAssignType, setselectedAssignType] = useState<string>("‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ");

  const fetchComments = async (postId: string): Promise<Comment[]> => {
    try {
      const res = await fetch(`/api/forum/posts/${postId}/comments`, {
        headers: token ? { Authorization: `Bearer ${token}` } : {},
      });
      return res.ok ? await res.json() : [];
    } catch (error) {
      console.error("‚ùå Failed to fetch comments:", error);
      return [];
    }
  };

  const fetchPosts = async () => {
    setLoading(true);
    try {
      const res = await fetch(`/api/posts`, {
        headers: token ? { Authorization: `Bearer ${token}` } : {},
      });

      if (!res.ok) {
        console.warn("‚ö†Ô∏è Failed to fetch posts");
        setPosts([]);
        return;
      }

      const basePosts: Array<Omit<Post, "comments"> & { attachments?: any[] }> = await res.json();

      const enrichedPosts: Post[] = await Promise.all(
        basePosts.map(async (p) => ({
          ...p,
          avatarUrl: formatAvatarUrl(p.avatarUrl),
          attachments: normalizeAttachments(p.id, p.attachments),
          comments: await fetchComments(p.id),
        }))
      );
      setPosts(enrichedPosts);
    } catch (err) {
      console.error("‚ùå Error fetching posts:", err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    void fetchPosts();
  }, []);

  const handlePostCreated = () => {
    void fetchPosts();
  };

  const groupPosts = posts.reduce((acc, post) => {
    const category = post.forumCategory || "Uncategorized";
    if (!acc[category]) acc[category] = [];
    acc[category].push(post);
    return acc;
  }, {} as Record<string, Post[]>);

  return (
    <div className="flex min-h-screen bg-gray-50">
      <Sidebar />

      <main className="flex-1 overflow-y-auto p-6">
        {loading ? (
          <p className="text-gray-500 text-sm">Loading posts‚Ä¶</p>
        ) : posts.length === 0 ? (
          <p className="text-gray-400 text-sm">No posts available.</p>
        ) : (
          <div className="space-y-4">
            <div className="flex space-x-2">
              {["‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ","‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£ IT","IT & ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"].map((type) => (
                <button
                  key={type}
                  onClick={() => setselectedAssignType(type)}
                  className={`px-3 py-1 rounded-md text-sm ${
                    selectedAssignType === type
                      ? "bg-purple-500 text-white"
                      : "bg-gray-200 hover:bg-gray-300"
                  }`}
                >
                  {type.charAt(0).toUpperCase() + type.slice(1)}
                </button>
              ))}
            </div>

            {Object.entries(groupPosts)
              .filter(([category]) => category === selectedAssignType)
              .map(([category, postsInCategory]) => (
                <div key={category} className="mb-8">
                  <h2 className="text-xl font-semibold text-gray-700 mb-4">
                    {category}
                  </h2>
                  <div className="space-y-4">
                    {postsInCategory.map((post) => (
                      <PostCardWidget key={post.id} post={post} />
                    ))}
                  </div>
                </div>
              ))}
          </div>
        )}
      </main>

      <aside className="w-80 p-6 hidden lg:block"></aside>
      <AddPostWidget onCreated={handlePostCreated} />
    </div>
  );
};

export default KnowledgeForumLayout;
src/pages/forum/PostCardWidget.tsx (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏ü‡∏•‡πå)
tsx
Copy
Edit
import { useState } from "react";

type Attachment = {
  filename: string;
  originalName?: string;
  mimeType?: string;
  size?: number;
  url?: string;
};

type Post = {
  id: string;
  title: string;
  message: string;
  authorName: string;
  createdAt: string;
  avatarUrl?: string;
  attachments?: Attachment[];
};

const canPreviewImage = (mime?: string, name?: string) =>
  (mime && mime.startsWith("image/")) ||
  /\.(png|jpe?g|gif|webp|bmp|svg)$/i.test(name || "");

const isPDF = (mime?: string, name?: string) =>
  (mime === "application/pdf") || /\.pdf$/i.test(name || "");

const isAudio = (mime?: string, name?: string) =>
  (mime && mime.startsWith("audio/")) || /\.(mp3|wav|ogg|m4a)$/i.test(name || "");

const isVideo = (mime?: string, name?: string) =>
  (mime && mime.startsWith("video/")) || /\.(mp4|webm|ogg|mov|m4v)$/i.test(name || "");

const formatDate = (iso: string) => {
  try {
    return new Date(iso).toLocaleString();
  } catch {
    return iso;
  }
};

const AttachmentItem = ({ file }: { file: Attachment }) => {
  const [showPreview, setShowPreview] = useState(false);
  const viewInNewTab = () => {
    if (file.url) window.open(file.url, "_blank", "noopener,noreferrer");
  };

  const name = file.originalName || file.filename;

  return (
    <li className="border rounded-md p-2 flex flex-col gap-2">
      <div className="flex items-center justify-between gap-3">
        <span className="truncate text-sm" title={name}>{name}</span>
        <div className="flex items-center gap-2 shrink-0">
          {(canPreviewImage(file.mimeType, name) || isAudio(file.mimeType, name) || isVideo(file.mimeType, name)) && file.url && (
            <button
              onClick={() => setShowPreview(prev => !prev)}
              className="px-2 py-1 text-xs rounded bg-gray-200 hover:bg-gray-300"
            >
              {showPreview ? "‡∏ã‡πà‡∏≠‡∏ô‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß" : "‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"}
            </button>
          )}

          {isPDF(file.mimeType, name) && file.url && (
            <button
              onClick={viewInNewTab}
              className="px-2 py-1 text-xs rounded bg-gray-200 hover:bg-gray-300"
            >
              ‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π
            </button>
          )}

          {file.url && (
            <a
              href={`${file.url}?download=1`}
              target="_blank"
              rel="noopener noreferrer"
              className="px-2 py-1 text-xs rounded bg-blue-600 text-white hover:bg-blue-700"
            >
              ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
            </a>
          )}
        </div>
      </div>

      {showPreview && canPreviewImage(file.mimeType, name) && file.url && (
        <img
          src={file.url}
          alt={name}
          className="max-h-64 rounded-md object-contain border"
        />
      )}

      {showPreview && isAudio(file.mimeType, name) && file.url && (
        <audio controls src={file.url} className="w-full" />
      )}

      {showPreview && isVideo(file.mimeType, name) && file.url && (
        <video controls src={file.url} className="w-full max-h-64 rounded-md" />
      )}
    </li>
  );
};

const AttachmentsBlock = ({ attachments }: { attachments?: Attachment[] }) => {
  if (!attachments || attachments.length === 0) return null;
  // ‡πÄ‡∏ï‡∏¥‡∏° url ‡πÉ‡∏´‡πâ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à (‡∏ö‡∏≤‡∏á‡∏Å‡∏£‡∏ì‡∏µ backend ‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ map)
  const withUrl = attachments.map(a => ({
    ...a,
    url: a.url || (a.filename ? `/api/posts/${(window as any).postId ?? ""}/attachments/${encodeURIComponent(a.filename)}` : undefined),
  }));

  return (
    <div className="mt-3">
      <h4 className="text-sm font-medium mb-2">‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö</h4>
      <ul className="grid grid-cols-1 sm:grid-cols-2 gap-2">
        {withUrl.map((f, i) => (
          <AttachmentItem key={(f.filename || f.url || "att") + "-" + i} file={f} />
        ))}
      </ul>
    </div>
  );
};

const PostCardWidget = ({ post }: { post: Post }) => {
  // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö AttachmentsBlock (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡πâ‡∏≤ backend ‡∏™‡πà‡∏á url ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß)
  (window as any).postId = post.id;

  return (
    <article className="bg-white rounded-xl shadow p-4">
      <div className="flex items-center gap-3 mb-2">
        {post.avatarUrl ? (
          <img src={post.avatarUrl} alt={post.authorName} className="w-9 h-9 rounded-full object-cover" />
        ) : (
          <div className="w-9 h-9 rounded-full bg-gray-300" />
        )}
        <div>
          <h3 className="text-lg font-semibold">{post.title}</h3>
          <p className="text-xs text-gray-600">
            ‡πÇ‡∏î‡∏¢ {post.authorName} ‚Ä¢ {formatDate(post.createdAt)}
          </p>
        </div>
      </div>

      <p className="text-gray-800 whitespace-pre-wrap">{post.message}</p>

      <AttachmentsBlock attachments={post.attachments} />
    </article>
  );
};

export default PostCardWidget;
üóÉÔ∏è (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö
‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Flyway/Liquibase ‡∏´‡∏£‡∏∑‡∏≠ DDL ‡πÄ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á post_attachments:

sql
Copy
Edit
CREATE TABLE IF NOT EXISTS post_attachments (
  post_id VARCHAR(21) NOT NULL,
  file_name VARCHAR(255) NOT NULL,
  original_name VARCHAR(255),
  mime_type VARCHAR(127),
  file_size BIGINT,
  PRIMARY KEY (post_id, file_name),
  CONSTRAINT fk_post_attachments_post
    FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE
);


---
accept={[
                ".pdf",".doc",".docx",".xls",".xlsx",".ppt",".pptx",".txt",".csv",".zip",
                "application/pdf",
                "application/msword",
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "application/vnd.ms-powerpoint",
                "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                "text/plain","text/csv","application/zip"
              ].join(",")}
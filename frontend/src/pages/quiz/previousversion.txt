import { useState, useContext } from "react";
import { AuthContext } from "../../Authentication/AuthContext";
import { Navigate } from "react-router-dom";
import SidebarWidget from "../../widgets/SidebarWidget";
import CalendarWidget from "../../widgets/CalendarWidget";

type Question = {
  id: number;
  question: string;
  options: string[];
  answer: string;
};

const sampleQuestions: Question[] = [
  {
    id: 1,
    question: "What does HTML stand for?",
    options: [
      "Hyper Trainer Marking Language",
      "Hyper Text Markup Language",
      "Hyper Text Marketing Language",
      "Hyper Tool Markup Language",
    ],
    answer: "Hyper Text Markup Language",
  },
  {
    id: 2,
    question: "Which company developed React?",
    options: ["Google", "Microsoft", "Facebook", "Apple"],
    answer: "Facebook",
  },
  {
    id: 3,
    question: "What is the default port for React dev server?",
    options: ["3000", "8080", "5000", "4200"],
    answer: "3000",
  },
];

const QuizPage = () => {
  const { user, token: ctxToken } = useContext(AuthContext);
  const token =
    ctxToken || localStorage.getItem("token") || sessionStorage.getItem("token");
  const displayName = user?.name || user?.upn || "User";

  const [currentIndex, setCurrentIndex] = useState(0);
  const [selectedOption, setSelectedOption] = useState<string | null>(null);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);

  if (!token) return <Navigate to="/" replace />;

  const currentQuestion = sampleQuestions[currentIndex];

  const handleNext = () => {
    if (selectedOption === currentQuestion.answer) {
      setScore(score + 1);
    }

    if (currentIndex + 1 < sampleQuestions.length) {
      setCurrentIndex(currentIndex + 1);
      setSelectedOption(null);
    } else {
      setShowResult(true);
    }
  };

  const resetQuiz = () => {
    setCurrentIndex(0);
    setSelectedOption(null);
    setScore(0);
    setShowResult(false);
  };

  return (
    <>
      <div className="min-h-screen bg-gray-50 flex">
        <SidebarWidget />

        <main className="flex-1 p-6">
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-3xl font-bold text-gray-800">
              🧠 Quiz Time, {displayName}
            </h1>
          </div>

          <div className="grid grid-cols-1 xl:grid-cols-4 gap-6">
            <div className="xl:col-span-3 space-y-6">
              <div className="bg-white p-6 rounded-lg shadow-md">
                {showResult ? (
                  <div className="text-center space-y-4">
                    <p className="text-xl font-semibold text-green-700">
                      🎉 You scored {score} / {sampleQuestions.length}
                    </p>
                    <button
                      onClick={resetQuiz}
                      className="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                    >
                      Restart Quiz
                    </button>
                  </div>
                ) : (
                  <>
                    <p className="text-gray-600 text-sm mb-2">
                      Question {currentIndex + 1} of {sampleQuestions.length}
                    </p>
                    <h2 className="text-lg font-semibold mb-4">
                      {currentQuestion.question}
                    </h2>
                    <ul className="space-y-2">
                      {currentQuestion.options.map((option) => (
                        <li key={option}>
                          <label className="flex items-center space-x-2">
                            <input
                              type="radio"
                              name="option"
                              value={option}
                              checked={selectedOption === option}
                              onChange={() => setSelectedOption(option)}
                              className="accent-blue-600"
                            />
                            <span>{option}</span>
                          </label>
                        </li>
                      ))}
                    </ul>
                    <div className="mt-6 text-right">
                      <button
                        onClick={handleNext}
                        disabled={!selectedOption}
                        className="px-6 py-2 bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50"
                      >
                        {currentIndex + 1 === sampleQuestions.length
                          ? "Finish"
                          : "Next"}
                      </button>
                    </div>
                  </>
                )}
              </div>
            </div>
            <div className="order-1 xl:order-2">
              <div className="space-y-6 mt-4 xl:mt-0">
                <CalendarWidget />
              </div>
            </div>
          </div>
        </main>
      </div>
    </>
  );
};

export default QuizPage;



import { Document, Page } from 'react-pdf';
import { useState } from 'react';

const PDFViewer = ({ pdfUrl }) => {
  const [numPages, setNumPages] = useState(null);
  const [pageNumber, setPageNumber] = useState(1);

  const onDocumentLoadSuccess = ({ numPages }) => {
    setNumPages(numPages);
  };

  return (
    <div className="flex flex-col items-center">
      <Document
        file={pdfUrl}
        onLoadSuccess={onDocumentLoadSuccess}
        loading="Loading PDF..."
      >
        <Page pageNumber={pageNumber} width={600} />
      </Document>

      <div className="mt-4 flex space-x-4">
        <button
          onClick={() => setPageNumber((prev) => Math.max(prev - 1, 1))}
          disabled={pageNumber <= 1}
          className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
        >
          Previous
        </button>
        <span>
          Page {pageNumber} of {numPages}
        </span>
        <button
          onClick={() => setPageNumber((prev) => Math.min(prev + 1, numPages))}
          disabled={pageNumber >= numPages}
          className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
        >
          Next
        </button>
      </div>
    </div>
  );
};
import PdfViewer from '@/components/PdfViewer';

const renderContent = () => {
  if (lesson.contentType === 'document') {
    return <PdfViewer url={`/api/learning/document/${lesson.documentUrl?.split("/").pop()}`} />;
  }
  // ... other content types
};


import { Worker, Viewer } from '@react-pdf-viewer/core';
import '@react-pdf-viewer/core/lib/styles/index.css';
import '@react-pdf-viewer/default-layout/lib/styles/index.css';

const renderContent = () => {
  if (lesson.contentType === "video") {
    return (
      <video
        ref={videoRef}
        controls
        onLoadedMetadata={handleLoadedMetadata}
        onTimeUpdate={handleTimeUpdate}
        poster={lesson.thumbnailUrl}
        className="w-full h-auto bg-black"
        src={`/api/learning/video/${filename}`}
      />
    );
  } else if (lesson.contentType === "document") {
    return (
      <div>
        <Worker workerUrl={`https://unpkg.com/pdfjs-dist@3.4.120/build/pdf.worker.min.js`}>
          <Viewer fileUrl="/api/learning/document/f000530f0c384eb8b57b4cb7dd0467f4.pdf" />
        </Worker>
        <h1>{lesson.contentType}</h1>
      </div>
    );
  }
  return null;
};


const renderContent = () => {
  if (lesson.contentType === "video") {
    return (
      <video
        ref={videoRef}
        controls
        onLoadedMetadata={handleLoadedMetadata}
        onTimeUpdate={handleTimeUpdate}
        poster={lesson.thumbnailUrl}
        className="w-full h-auto bg-black"
        src={`/api/learning/video/${filename}`}
      />
    );
  } else if (lesson.contentType === "document") {
    return (
      <PDFViewerWithPagination fileUrl="/api/learning/document/f000530f0c384eb8b57b4cb7dd0467f4.pdf" />
    );
  }
  return null;
};

import { Worker, Viewer, SpecialZoomLevel } from '@react-pdf-viewer/core';
import { useState } from 'react';
import '@react-pdf-viewer/core/lib/styles/index.css';

const PDFViewerWithPagination = ({ fileUrl }) => {
  const [currentPage, setCurrentPage] = useState(0);
  const [numPages, setNumPages] = useState(0);

  const handleDocumentLoad = (e) => {
    setNumPages(e.doc.numPages);
  };

  const goToNextPage = () => {
    if (currentPage < numPages - 1) {
      setCurrentPage(currentPage + 1);
    }
  };

  const goToPreviousPage = () => {
    if (currentPage > 0) {
      setCurrentPage(currentPage - 1);
    }
  };

  return (
    <div>
      <Worker workerUrl="https://unpkg.com/pdfjs-dist@3.11.174/build/pdf.worker.min.js">
        <Viewer
          fileUrl={fileUrl}
          defaultScale={SpecialZoomLevel.PageFit}
          initialPage={currentPage}
          onDocumentLoad={handleDocumentLoad}
        />
      </Worker>

      <div className="flex justify-center mt-4 space-x-4">
        <button
          onClick={goToPreviousPage}
          disabled={currentPage === 0}
          className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
        >
          Previous
        </button>
        <span>Page {currentPage + 1} of {numPages}</span>
        <button
          onClick={goToNextPage}
          disabled={currentPage === numPages - 1}
          className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
        >
          Next
        </button>
      </div>
    </div>
  );
};
  //    <div>
      //   <Worker workerUrl={`https://unpkg.com/pdfjs-dist@3.11.174/build/pdf.worker.min.js`}>
      //     <Viewer fileUrl="/api/learning/document/f000530f0c384eb8b57b4cb7dd0467f4.pdf" />
      //   </Worker>
      //   <h1>{lesson.contentType}</h1>
      // </div>
      ={`


      import { Worker, Viewer } from '@react-pdf-viewer/core';
import '@react-pdf-viewer/core/lib/styles/index.css';
import { useState } from 'react';

const PdfViewer = ({ url }: { url: string }) => {
  const [currentPage, setCurrentPage] = useState(0);
  const [numPages, setNumPages] = useState(0);

  const handleDocumentLoad = (e: any) => {
    setNumPages(e.doc.numPages);
  };

  return (
    <div style={{ height: '750px' }}>
      <Worker workerUrl="https://unpkg.com/pdfjs-dist@3.11.174/build/pdf.worker.min.js">
        <Viewer
          fileUrl={url}
          initialPage={currentPage}
          onDocumentLoad={handleDocumentLoad}
        />
      </Worker>

      <div style={{ marginTop: '1rem', textAlign: 'center' }}>
        <button
          onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 0))}
          disabled={currentPage === 0}
        >
          Previous
        </button>
        <span style={{ margin: '0 1rem' }}>
          Page {currentPage + 1} of {numPages}
        </span>
        <button
          onClick={() => setCurrentPage((prev) => Math.min(prev + 1, numPages - 1))}
          disabled={currentPage === numPages - 1}
        >
          Next
        </button>
      </div>
    </div>
  );
};

export default PdfViewer;
---------
return (
  <div className="bg-white p-4 rounded shadow w-full">
    <Document
      file={`/api/learning/document/${documentfile}`}
      onLoadSuccess={({ numPages }) => setNumPages(numPages)}
      onLoadError={(error) => console.error("❌ Error loading PDF:", error)}
    >
      <Page pageNumber={currentPage + 1} />
    </Document>

    <div className="flex justify-between items-center mt-4">
      <button
        onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 0))}
        disabled={currentPage <= 0}
        className="px-4 py-2 bg-gray-200 rounded disabled:opacity-50"
      >
        ◀️ Previous
      </button>
      <p className="text-sm text-gray-600">
        Page {currentPage + 1} of {numPages}
      </p>
      <button
        onClick={() => setCurrentPage((prev) => Math.min(prev + 1, numPages - 1))}
        disabled={currentPage >= numPages - 1}
        className="px-4 py-2 bg-gray-200 rounded disabled:opacity-50"
      >
        Next ▶️
      </button>
    </div>
  </div>
);

import { pdfjs } from 'react-pdf';
import { Document, Page } from 'react-pdf';

pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;

import { Document, Page, pdfjs } from 'react-pdf';


